1] Créer une grille modulable par rapport à ses dimensions DONE

2] Implémenter les différents objets (murs)

3] Ajouter un personnage qui se déplace dans la grille et qui collisionne
   avec les murs DONE

4] Ajouter les différentes interactions caisse/joueur, caisse/murs et caisse/caisse. DONE

5] Ajouter la détection d'objectifs atteints.

6]
---------------------------------

Pour les targets : 

- Faire un vecteur de tuples avec position et booléen, dans board. Done
- Refactor :
   * fichier texte.cpp
   * fonction move
- Dimensions +9 fichier txt. DONE
- Générer d'autres niveaux et faire un dossier levels.
- Ajouter des boutons pour passer les niveaux.
- Utiliser des smart pointers où c'est possible.
- Best score dans le fichier txt et l'afficher. DONE
$ Penser à un menu principal.


________________________________
TODO:
1° Cas d'échecs :
- quand dans les voisins consécutifs il y a soit 1 mur et 1 boite soit 2 boites soit 2 murs.
2° rapport
3° Refactor :
- Classe texte


---------------------------------

Pistes d'améliorations :
1) Algorithme pour trouver un chemin devrait renvoyer la valeur minimale de pas et non une des valeurs possibles
   Pour ce faire -> Algorithme en largeur.
   Hugo a fichier sur son ordi
2) Détection d'échecs
   Si niveau plus possible, alors message plutôt que quand toutes les boites sont bloquées